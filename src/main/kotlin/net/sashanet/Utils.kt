package net.sashanet

import AccessRequestWebhook
import net.sashanet.ticketobj.Article
import net.sashanet.ticketobj.NewUser
import net.sashanet.ticketobj.TicketAPIObj
import java.text.SimpleDateFormat
import java.util.*


/**
 * Utils: Does things for our APIAgent. Speaks to the APIAgent class to do its dirty work sometimes.
 * Very sparse right now.
 */

val apiAgent = APIAgent()
class Utils {
    var currentTicketProcessing: Int = 0
    fun parseOrgs(org: String): String {
        when(org) {
            "fgss" -> return "FGSS"
            "beverly" -> return "Beverly"
            "southview" -> return "Southview"
            "thelma" -> return "Thelma"
            "pompano" -> return "Pompano"
            else -> return "Off-site"
        }
    }
    fun parseMediaTypes(mediaType: String?): String {
        when(mediaType) {
            "tv_show" -> return "TV show"
            "movie" -> return "Movie"
            "game" -> return "Game"
            "digimedia" -> return "Digital Media"
            else -> return "Other"
        }
    }
    fun parseJsonDate() {
        val jsonDateString = "2023-12-25T10:30:00Z"

        try {
            // Define the format of the JSON date string
            val jsonDateFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")

            // Parse the JSON date string into a Date object
            val javaDate = jsonDateFormat.parse(jsonDateString)

            // Print the Java date object
            println(javaDate)
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
    fun generatePassword(length: Int): String {
        val possibleChars: CharSequence = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*"
        var ret = ""
        for(i in 0..<length) {
            ret += possibleChars.random()
        }
        println(ret)
        return ret
    }
    suspend fun getUserEmailFromID(id: Int): String {
        println("Searching user...")
        var search = apiAgent.searchUser("id:$id")
        if(search.isNotEmpty()) {
            println("User found!")
            return search[0].email!!
        } else {
            println("No user found. returning default value")
            return "404usernotfound@sashanet.net"
        }
    }
    suspend fun patchMediaReqTitle(webhook: MediaRequestWebhook) {
        var modTitle = if(webhook.console != "") {
            "${webhook.mediaName} (${webhook.console} game)"
        } else {
            "${webhook.mediaName} (${parseMediaTypes(webhook.mediaType)})"
        }
        val ticket = TicketAPIObj(id = webhook.internalId?.toInt(),
            title = modTitle)
        apiAgent.modifyTicket(ticket)
    }
    suspend fun patchRadioLogbookEntry(webhook: TicketIDWebhook) {
        println("Getting ticket...")
        var radioLogEntry = apiAgent.getTicket(webhook.id)
        println("First step: Change customer and owner to creator of ticket")
        var creator = apiAgent.searchUser("id:${radioLogEntry?.createdById}")[0]
        radioLogEntry?.ownerId = creator.id
        radioLogEntry?.customerId = creator.id
        apiAgent.modifyTicket(radioLogEntry!!)
        println("Then we patch their callsign in...")
        radioLogEntry.hamUserCallsign = creator.hamCallSign
        apiAgent.modifyTicket(radioLogEntry)
        println("Should be all set.")
    }
    suspend fun mediaCheck(webhook: TicketIDWebhook) {
        println("Getting ticket...")
        var mediaCheckTicket = apiAgent.getTicket(webhook.id)
        when(mediaCheckTicket!!.stateId) {
             4 -> { //closed
                apiAgent.newTicket(TicketAPIObj(
                    title = "TVHeadend Maintenance - ${Date()}",
                    groupId = 10, //Broadcast and Media Infrastructure
                    customerId = 11, //SashaNet Administrator
                    type = "TVHeadend Maintenance",
                    article = Article(
                        internal = false,
                        sender = "Customer",
                        //senderId = constants.apiAgentUserID,
                        type = "fax",
                        contentType = "text/html",
                        body = """
                            <h1>SashaNet TVHeadend Maintenance</h1>
                            <p>This is an autogenerated ticket from ${constants.userAgent}.</p>
                            <p>Please ensure continued operation of the TVHeadend system by performing the following
                            steps:</p>
                            <ol>
                                <li>Check all IPTV-based channels for a good feed.</li>
                                <li>If you find any channels with stale/poor quality feeds, note them here.</li>
                                <li>Check <a href=https://iptv-org.github.io/>iptv-org.github.io</a> for updated feeds for each stale channel.</li>
                                <li>If you cannot find a suitable replacement, please find an alternative channel and rotate the stale channel for the new channel.</li>
                            </ol>
                            <p>Documentation on this process is available in the Knowledge Base. Please complete this ticket within 1 week of submission.</p>
                            <p>You run the risk of reduced entertainment experience for TVHeadend users if this task is not completed in a timely manner.</p>
                        """.trimIndent()
                    )
                ))
            }
            8 -> { //rejected
                apiAgent.newArticle(Article(
                    ticketId = webhook.id,
                    internal = false,
                    sender = "Agent",
                    //senderId = constants.apiAgentUserID,
                    from = "noreply1738@sashanet.net",
                    to = mediaCheckTicket.ownerId?.let { getUserEmailFromID(it) },
                    type = "email",
                    contentType = "text/html",
                    subject = "${mediaCheckTicket.title} rejected - Cycle resetting",
                    body = """
                        This ticket was rejected. Creating new ticket here. This task is mandatory.
                    """.trimIndent()
                ))
                apiAgent.newTicket(TicketAPIObj(
                    title = "TVHeadend Maintenance - ${Date()}",
                    groupId = 10, //Broadcast and Media Infrastructure
                    customerId = 11, //SashaNet Administrator
                    type = "TVHeadend Maintenance",
                    article = Article(
                        internal = false,
                        sender = "Customer",
                        //senderId = constants.apiAgentUserID,
                        type = "fax",
                        contentType = "text/html",
                        body = """
                            <h1>SashaNet TVHeadend Maintenance</h1>
                            <p>This is an autogenerated ticket from ${constants.userAgent}.</p>
                            <p>This ticket stems from rejected maintenance ticket #REQ-${mediaCheckTicket.number}.</p>
                            <p>Please ensure continued operation of the TVHeadend system by performing the following
                            steps:</p>
                            <ol>
                                <li>Check all IPTV-based channels for a good feed.</li>
                                <li>If you find any channels with stale/poor quality feeds, note them here.</li>
                                <li>Check <a href=https://iptv-org.github.io/>iptv-org.github.io</a> for updated feeds for each stale channel.</li>
                                <li>If you cannot find a suitable replacement, please find an alternative channel and rotate the stale channel for the new channel.</li>
                            </ol>
                            <p>Documentation on this process is available in the Knowledge Base. Please complete this ticket within 1 week of submission.</p>
                            <p>You run the risk of reduced entertainment experience for TVHeadend users if this task is not completed in a timely manner.</p>
                        """.trimIndent()
                    )
                ))
            }
            else -> {
                apiAgent.modifyTicket(
                    TicketAPIObj(
                    id = mediaCheckTicket.id,
                    priorityId = 3,
                    article = Article(
                        internal = false,
                        sender = "Agent",
                        //senderId = constants.apiAgentUserID,
                        from = "noreply1738@sashanet.net",
                        to = mediaCheckTicket.ownerId?.let { getUserEmailFromID(it) },
                        type = "email",
                        contentType = "text/html",
                        subject = "${mediaCheckTicket.title} not completed yet? Hurry up :)",
                        body = """
                            <h1>SashaNet TVHeadend Maintenance</h1>
                            <p>This is an autogenerated email from ${constants.userAgent}.</p>
                            <p>You are in trouble :)</p>
                            <p>Please ensure continued operation of the TVHeadend system by performing the following
                            steps IMMEDIATELY:</p>
                            <br>
                            <ol>
                                <li>Check all IPTV-based channels for a good feed.</li>
                                <li>If you find any channels with stale/poor quality feeds, note them here.</li>
                                <li>Check <a href=https://iptv-org.github.io/>iptv-org.github.io</a> for updated feeds for each stale channel.</li>
                                <li>If you cannot find a suitable replacement, please find an alternative channel and rotate the stale channel for the new channel.</li>
                            </ol>
                            <p>Documentation on this process is available in the Knowledge Base. Please complete this ticket within 1 week of submission.</p>
                            <p>You run the risk of reduced entertainment experience for TVHeadend users if this task is not completed RIGHT NOW.</p>
                            <p>This ticket is now high priority. Hurry up already!</p>
                            <br>
                            <p>SashaNet Broadcast and Media Infrastructure<br>sent by ${constants.userAgent} on ${Date()}.</p>
                    """.trimIndent()
                    )
                )
                )
            }
        }
    }
    suspend fun onboarding(webhook: AccessRequestWebhook) {
        println(apiAgent)
        val ticket = TicketAPIObj(
            id = webhook.internalId.toInt(),
            ownerId = null,
            article = Article(
                internal = true,
                sender = "Agent",
                contentType = "text/html",
                type = "note",
                body = "Processing by ${constants.userAgent} begins at ${Date()}."
            )
        )
        apiAgent.modifyTicket(ticket)
        // First thing is to check if our user exists. If it does, we don't make it.
        val searchResponse = apiAgent.searchUser("email.keyword:${webhook.email}")
        if(searchResponse.size == 0) { //we proceed
            val newGuy = NewUser(
                login = webhook.email,
                email = webhook.email,
                firstname = webhook.firstName,
                lastname = webhook.lastName,
                organization = utils.parseOrgs(webhook.org),
                roles = arrayOf("SashaNet Agent").toList(),
                phone = webhook.phoneNumber, //TODO: convert phone number to E.164 using libphonenumber
                mobile = "",
                password = utils.generatePassword(8)
            )
            val newUser = apiAgent.createUser(newGuy)
            if(newUser != null) {
                apiAgent.modifyTicket(TicketAPIObj(
                    id = webhook.internalId.toInt(),
                    state = "closed",
                    ownerId = constants.apiAgentUserID,
                    article = Article(
                        internal = true,
                        sender = "System",
                        type = "email",
                        to = newUser.email,
                        contentType = "text/html",
                        subject = "Welcome to SashaTicket, ${newUser.firstname} :3",
                        body = """
                            <h4>Hello ${newUser.firstname},<br/><br/></h4>
                            <p>This email is to let you know that an account has been created for you on SashaTicket!<br/>
                            SashaTicket is your one source to request anything from SashaNet's team, up to and including Sasha herself :3<br/><br/></p>
                            <p>Your login information is as follows. Please be sure to change the password shown as soon as possible.<br/>
                            This password is automatically generated, and should not be considered secure.<br/><br/></p>
                            Username/login: ${newUser.login}<br/>
                            Password: ${newGuy.password}<br/><br/>
                            <p>If you would also like to receive SMS notifications/communications on tickets, please let us know by responding to this email.<br/><br/></p>
                            Log in <a href=https://99.38.119.115>here</a> (The site is safe. We do not register with any certificate authority.)<br/>
                            (Or if you happen to be on site at SashaNet's main Beverly location or VPNed in use <a href=https://sashaticketv2.net>this link</a> instead :3)<br/><br/>
                            SashaTicket System<br/>
                            Access provisioned under #REQ-${webhook.ticketNumber} by ${constants.userAgent}<br/>
                        """.trimIndent().trim('\n')
                    )
                ))
                apiAgent.modifyTicket(TicketAPIObj(
                    id = webhook.internalId.toInt(),
                    article = Article(
                        internal = true,
                        sender = "Agent",
                        type = "note",
                        contentType = "text/html",
                        body = "Processing by ${constants.userAgent} ends at ${Date()}."
                    )
                ))
            }
        } else {
            println("No action taken. Mark this as rejected and close ticket.")
            var originalRequestorEmail = utils.getUserEmailFromID(webhook.originalRequester.toInt())
            val ticket = TicketAPIObj(
                id = webhook.internalId.toInt(),
                state = "rejected",
                article = Article(
                    internal = false,
                    sender = "Agent",
                    type = "email",
                    to = originalRequestorEmail,
                    contentType = "text/html",
                    subject = "Access for ${webhook.email} rejected",
                    body = """
                        <h4>Hello,</h4>
                        <p>This email is to notify you that your access request for ${webhook.firstName} ${webhook.lastName} was rejected
                        because the account already likely exists. If you believe this was an error, please resubmit the request referencing this
                        ticket number: ${webhook.ticketNumber}.</p><br/>
                        SashaTicket System<br/>
                        Request rejected by ${constants.userAgent} at ${Date()}<br/>
                    """.trimIndent()
                )
            )
            apiAgent.modifyTicket(ticket)
        }
    }
    suspend fun offboarding(webhook: TicketIDWebhook) {
        println("Getting ticket...")
        var offboardingTicket = apiAgent.getTicket(webhook.id)
        offboardingTicket!!.title = "Offboarding Request for ${offboardingTicket.accessFname} ${offboardingTicket.accessLname}"
        apiAgent.modifyTicket(offboardingTicket)
        //Now that we have the ticket, check the fields for what systems require offboarding.
        //On prem users get a ticket to IT Security under IT Incident to block network device access as well.
        if(offboardingTicket.offboardOnSite == true && offboardingTicket.accessOrg != "offsite") {
            val netblockTicket = apiAgent.newTicket(TicketAPIObj(
                title = "SashaNet Offboarding: ${offboardingTicket.accessFname} ${offboardingTicket.accessLname} On-prem network access",
                groupId = 8, //IT Security
                customerId = constants.apiAgentUserID,
                type = "SashaNet Offboarding",
                dueDate = offboardingTicket.dueDate,
                article = Article(
                    internal = false,
                    sender = "Customer",
                    contentType = "text/html",
                    type = "web",
                    body = """
                        This is an automatically generated ticket created as part of offboarding ticket #REQ-${offboardingTicket.number}.<br/>
                        Please disable site-level network device access for all devices associated with the following user:<br/>
                        ${offboardingTicket.accessFname} ${offboardingTicket.accessLname}<br/>
                        Site: ${offboardingTicket.accessOrg}<br/>
                        Please complete this by the due date listed on the parent ticket.<br/>
                        If this ticket is overdue, please consider it urgent and therefore high priority.
                    """.trimIndent()
                ),
                accessFname = offboardingTicket.accessFname,
                accessLname = offboardingTicket.accessLname,
                accessEmail = offboardingTicket.accessEmail
            ))
            apiAgent.newTicketLink(offboardingTicket.id!!, netblockTicket?.id!!, "parent")
        }
        for(i in offboardingTicket.accessOffboardSystems!!.indices) {
            var tempAccessOrg: String?
            var currentSystem: String = offboardingTicket.accessOffboardSystems!![i]
            var ticket = apiAgent.newTicket(TicketAPIObj(
                title = "SashaNet Offboarding: Remove ${currentSystem} access for ${offboardingTicket.accessFname} ${offboardingTicket.accessLname}",
                groupId = 9, //IT Access Management
                customerId = constants.apiAgentUserID,
                type = "Access Request",
                dueDate = offboardingTicket.dueDate,
                article = Article(
                    internal = false,
                    sender = "Customer",
                    contentType = "text/html",
                    type = "web",
                    body = """
                        This is an automatically generated ticket created as part of offboarding ticket #REQ-${offboardingTicket.number}.<br/>
                        Please disable/remove access to the ${currentSystem} application for the following user:<br/>
                        ${offboardingTicket.accessFname} ${offboardingTicket.accessLname} (${offboardingTicket.accessEmail}<br/>
                        Please complete this by the due date listed on the parent ticket.<br/>
                        If this ticket is overdue, please consider it urgent and therefore high priority.
                    """.trimIndent()
                ),
                accessAction = "remove",
                accessSystem = currentSystem,
                accessFname = offboardingTicket.accessFname,
                accessLname = offboardingTicket.accessLname,
                accessOrg = if(currentSystem == "sashaticket") offboardingTicket.accessOrg else null,
                accessEmail = offboardingTicket.accessEmail,
                accessUser = offboardingTicket.accessEmail
            ))
            apiAgent.newTicketLink(offboardingTicket.id!!, ticket?.id!!, "parent")
        }

    }
}