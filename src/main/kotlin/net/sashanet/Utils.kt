package net.sashanet

import kotlinx.serialization.json.Json
import net.sashanet.ticketobj.*
import java.time.*
import java.time.format.*
import java.util.Date

/**
 * Utils: Does things for our APIAgent. Speaks to the APIAgent class to do its dirty work sometimes.
 * Very sparse right now.
 */

val apiAgent = APIAgent()
class Utils {
    var lastTicketProcessed: Int = 0
    fun parseOrgs(org: String): String {
        when(org) {
            "fgss" -> return "FGSS"
            "beverly" -> return "Beverly"
            "southview" -> return "Southview"
            "thelma" -> return "Thelma"
            "pompano" -> return "Pompano"
            else -> return "Off-site"
        }
    }
    fun parseMediaTypes(mediaType: String?): String {
        when(mediaType) {
            "tv_show" -> return "TV show"
            "movie" -> return "Movie"
            else -> return "Other"
        }
    }
    fun parseJsonDate() {

    }
    fun generatePassword(length: Int): String {
        val possibleChars: CharSequence = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*"
        var ret = ""
        for(i in 0..length - 1) {
            ret += possibleChars.random()
        }
        println(ret)
        return ret
    }
    suspend fun getUserEmailFromID(id: Int): String {
        println("Searching user...")
        var search = apiAgent.searchUser("id:$id")
        if(search.isNotEmpty()) {
            println("User found!")
            return search[0].email!!
        } else {
            println("No user found. returning default value")
            return "noreply@sashanet.net"
        }
    }
    suspend fun patchMediaReqTitle(webhook: MediaRequestWebhook) {
        var modTitle = if(webhook.console != "") {
            "${webhook.mediaName} (${webhook.console} game)"
        } else {
            "${webhook.mediaName} (${parseMediaTypes(webhook.mediaType)})"
        }
        val ticket = TicketAPIObj(id = webhook.internalId?.toInt(),
            title = modTitle)
        apiAgent.modifyTicket(ticket)
    }
    suspend fun patchRadioLogbookEntry(webhook: TicketIDWebhook) {
        println("Getting ticket...")
        var radioLogEntry = apiAgent.getTicket(webhook.id)
        println("First step: Change customer and owner to creator of ticket")
        var creator = apiAgent.searchUser("id:${radioLogEntry?.createdById}")[0]
        radioLogEntry?.ownerId = creator.id
        radioLogEntry?.customerId = creator.id
        apiAgent.modifyTicket(radioLogEntry!!)
        println("Then we patch their callsign in...")
        radioLogEntry.hamUserCallsign = creator.hamCallSign
        apiAgent.modifyTicket(radioLogEntry)
        println("Should be all set.")
    }
    suspend fun mediaCheck(webhook: TicketIDWebhook) {
        println("Getting ticket...")
        var mediaCheckTicket = apiAgent.getTicket(webhook.id)
        when(mediaCheckTicket!!.stateId) {
             4 -> { //closed
                apiAgent.newTicket(TicketAPIObj(
                    title = "TVHeadend Maintenance - ${Date()}",
                    groupId = 10, //Broadcast and Media Infrastructure
                    customerId = 11, //SashaNet Administrator
                    type = "TVHeadend Maintenance",
                    article = Article(
                        internal = false,
                        sender = "Customer",
                        //senderId = constants.apiAgentUserID,
                        type = "fax",
                        contentType = "text/html",
                        body = """
                            <h1>SashaNet TVHeadend Maintenance</h1>
                            <p>This is an autogenerated ticket from ${constants.userAgent}.</p>
                            <p>Please ensure continued operation of the TVHeadend system by performing the following
                            steps:</p>
                            <ol>
                                <li>Check all IPTV-based channels for a good feed.</li>
                                <li>If you find any channels with stale/poor quality feeds, note them here.</li>
                                <li>Check <a href=https://iptv-org.github.io/>iptv-org.github.io</a> for updated feeds for each stale channel.</li>
                                <li>If you cannot find a suitable replacement, please find an alternative channel and rotate the stale channel for the new channel.</li>
                            </ol>
                            <p>Documentation on this process is available in the Knowledge Base. Please complete this ticket within 1 week of submission.</p>
                            <p>You run the risk of reduced entertainment experience for TVHeadend users if this task is not completed in a timely manner.</p>
                        """.trimIndent()
                    )
                ))
            }
            8 -> { //rejected
                apiAgent.newArticle(Article(
                    ticketId = webhook.id,
                    internal = false,
                    sender = "Agent",
                    //senderId = constants.apiAgentUserID,
                    from = "noreply1738@sashanet.net",
                    to = mediaCheckTicket.ownerId?.let { getUserEmailFromID(it) },
                    type = "email",
                    contentType = "text/html",
                    subject = "${mediaCheckTicket.title} rejected - Cycle resetting",
                    body = """
                        This ticket was rejected. Creating new ticket here. This task is mandatory.
                    """.trimIndent()
                ))
                apiAgent.newTicket(TicketAPIObj(
                    title = "TVHeadend Maintenance - ${Date()}",
                    groupId = 10, //Broadcast and Media Infrastructure
                    customerId = 11, //SashaNet Administrator
                    type = "TVHeadend Maintenance",
                    article = Article(
                        internal = false,
                        sender = "Customer",
                        //senderId = constants.apiAgentUserID,
                        type = "fax",
                        contentType = "text/html",
                        body = """
                            <h1>SashaNet TVHeadend Maintenance</h1>
                            <p>This is an autogenerated ticket from ${constants.userAgent}.</p>
                            <p>This ticket stems from rejected maintenance ticket #REQ-${mediaCheckTicket.number}.</p>
                            <p>Please ensure continued operation of the TVHeadend system by performing the following
                            steps:</p>
                            <ol>
                                <li>Check all IPTV-based channels for a good feed.</li>
                                <li>If you find any channels with stale/poor quality feeds, note them here.</li>
                                <li>Check <a href=https://iptv-org.github.io/>iptv-org.github.io</a> for updated feeds for each stale channel.</li>
                                <li>If you cannot find a suitable replacement, please find an alternative channel and rotate the stale channel for the new channel.</li>
                            </ol>
                            <p>Documentation on this process is available in the Knowledge Base. Please complete this ticket within 1 week of submission.</p>
                            <p>You run the risk of reduced entertainment experience for TVHeadend users if this task is not completed in a timely manner.</p>
                        """.trimIndent()
                    )
                ))
            }
            else -> {
                apiAgent.modifyTicket(
                    TicketAPIObj(
                    id = mediaCheckTicket.id,
                    priorityId = 3,
                    article = Article(
                        internal = false,
                        sender = "Agent",
                        //senderId = constants.apiAgentUserID,
                        from = "noreply1738@sashanet.net",
                        to = mediaCheckTicket.ownerId?.let { getUserEmailFromID(it) },
                        type = "email",
                        contentType = "text/html",
                        subject = "${mediaCheckTicket.title} not completed yet? Hurry up :)",
                        body = """
                            <h1>SashaNet TVHeadend Maintenance</h1>
                            <p>This is an autogenerated email from ${constants.userAgent}.</p>
                            <p>You are in trouble :)</p>
                            <p>Please ensure continued operation of the TVHeadend system by performing the following
                            steps IMMEDIATELY:</p>
                            <br>
                            <ol>
                                <li>Check all IPTV-based channels for a good feed.</li>
                                <li>If you find any channels with stale/poor quality feeds, note them here.</li>
                                <li>Check <a href=https://iptv-org.github.io/>iptv-org.github.io</a> for updated feeds for each stale channel.</li>
                                <li>If you cannot find a suitable replacement, please find an alternative channel and rotate the stale channel for the new channel.</li>
                            </ol>
                            <p>Documentation on this process is available in the Knowledge Base. Please complete this ticket within 1 week of submission.</p>
                            <p>You run the risk of reduced entertainment experience for TVHeadend users if this task is not completed RIGHT NOW.</p>
                            <p>This ticket is now high priority. Hurry up already!</p>
                            <br>
                            <p>SashaNet Broadcast and Media Infrastructure<br>sent by ${constants.userAgent} on ${Date()}.</p>
                    """.trimIndent()
                    )
                )
                )
            }
        }
    }
    suspend fun offboarding(webhook: TicketIDWebhook) {
        println("Getting ticket...")
        var offboardingTicket = apiAgent.getTicket(webhook.id)
        offboardingTicket!!.title = "Offboarding Request for ${offboardingTicket.accessFname} ${offboardingTicket.accessLname}"
        apiAgent.modifyTicket(offboardingTicket)
        //Now that we have the ticket, check the fields for what systems require offboarding.
        //On prem users get a ticket to IT Security under IT Incident to block network device access as well.
        if(offboardingTicket.offboardOnSite == true && offboardingTicket.accessOrg != "offsite") {
            val netblockTicket = apiAgent.newTicket(TicketAPIObj(
                title = "SashaNet Offboarding: ${offboardingTicket.accessFname} ${offboardingTicket.accessLname} On-prem network access",
                groupId = 8, //IT Security
                customerId = constants.apiAgentUserID,
                type = "SashaNet Offboarding",
                dueDate = offboardingTicket.dueDate,
                article = Article(
                    internal = false,
                    sender = "Customer",
                    contentType = "text/html",
                    type = "web",
                    body = """
                        This is an automatically generated ticket created as part of offboarding ticket #REQ-${offboardingTicket.number}.<br/>
                        Please disable site-level network device access for all devices associated with the following user:<br/>
                        ${offboardingTicket.accessFname} ${offboardingTicket.accessLname}<br/>
                        Site: ${offboardingTicket.accessOrg}<br/>
                        Please complete this by the due date listed on the parent ticket.<br/>
                        If this ticket is overdue, please consider it urgent and therefore high priority.
                    """.trimIndent()
                ),
                accessFname = offboardingTicket.accessFname,
                accessLname = offboardingTicket.accessLname,
                accessEmail = offboardingTicket.accessEmail
            ))
            apiAgent.newTicketLink(offboardingTicket.id!!, netblockTicket?.id!!, "parent")
        }
        for(i in offboardingTicket.accessOffboardSystems!!.indices) {
            var tempAccessOrg: String?
            var currentSystem: String = offboardingTicket.accessOffboardSystems!![i]
            var ticket = apiAgent.newTicket(TicketAPIObj(
                title = "SashaNet Offboarding: Remove ${currentSystem} access for ${offboardingTicket.accessFname} ${offboardingTicket.accessLname}",
                groupId = 9, //IT Access Management
                customerId = constants.apiAgentUserID,
                type = "Access Request",
                dueDate = offboardingTicket.dueDate,
                article = Article(
                    internal = false,
                    sender = "Customer",
                    contentType = "text/html",
                    type = "web",
                    body = """
                        This is an automatically generated ticket created as part of offboarding ticket #REQ-${offboardingTicket.number}.<br/>
                        Please disable/remove access to the ${currentSystem} application for the following user:<br/>
                        ${offboardingTicket.accessFname} ${offboardingTicket.accessLname} (${offboardingTicket.accessEmail}<br/>
                        Please complete this by the due date listed on the parent ticket.<br/>
                        If this ticket is overdue, please consider it urgent and therefore high priority.
                    """.trimIndent()
                ),
                accessAction = "remove",
                accessSystem = currentSystem,
                accessFname = offboardingTicket.accessFname,
                accessLname = offboardingTicket.accessLname,
                accessOrg = if(currentSystem == "sashaticket") offboardingTicket.accessOrg else null,
                accessEmail = offboardingTicket.accessEmail,
                accessUser = offboardingTicket.accessEmail
            ))
            apiAgent.newTicketLink(offboardingTicket.id!!, ticket?.id!!, "parent")
        }

    }
}